/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2022-03-03 06:00:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.role;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"zh\">\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/admin/header.jsp", out, false);
      out.write("\r\n");
      out.write("<body class=\"gray-bg\">\r\n");
      out.write("\t<div class=\"container-div\">\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t<div class=\"col-sm-12 select-info\">\r\n");
      out.write("\t\t\t\t<form id=\"condition-form\">\r\n");
      out.write("\t\t\t\t\t<div class=\"select-list gd\">\r\n");
      out.write("\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t<li>角色名称：<input type=\"text\" name=\"roleName\" />\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t<li>权限字符：<input type=\"text\" name=\"roleKey\" />\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t<li>角色状态：<select name=\"status\" id=\"gw\" >\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<option value=\"\">所有</option>\r\n");
      out.write("\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t\t\t\t<li><a class=\"btn btn-primary btn-rounded btn-sm\" onclick=\"$.table.search($('form').attr('id'))\"><i class=\"fa fa-search\"></i>&nbsp;搜索</a> <a class=\"btn btn-success btn-rounded btn-sm\" onclick=\"$.table.exportExcel($('form').attr('id'))\"><i class=\"fa fa-download\"></i>&nbsp;下载</a></li>\r\n");
      out.write("\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"btn-group hidden-xs\" id=\"toolbar\" role=\"group\">\r\n");
      out.write("\t\t\t\t<a class=\"btn btn-outline btn-success btn-rounded\" onclick=\"$.operate.add()\" shiro:hasPermission=\"system:role:add\"> <i class=\"fa fa-plus\"></i> 新增\r\n");
      out.write("\t\t\t\t</a> <a class=\"btn btn-outline btn-danger btn-rounded\" onclick=\"$.operate.batRemove()\" shiro:hasPermission=\"system:role:remove\"> <i class=\"fa fa-trash-o\"></i> 删除\r\n");
      out.write("\t\t\t\t</a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"col-sm-12 select-info order-table\">\r\n");
      out.write("\t\t\t\t<table id=\"bootstrap-table\" data-mobile-responsive=\"true\"></table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/admin/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\t<script >\r\n");
      out.write("\t\tvar editFlag = false;\r\n");
      out.write("\t\tvar removeFlag = false;\r\n");
      out.write("\t\tvar prefix = ctx + \"admin/role\"\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl:ctx+\"/DataServlet?method=dictData&dictType=sys_job_status\",\r\n");
      out.write("\t\t\tmethod:\"POST\",\r\n");
      out.write("\t\t\tdataType:\"json\",\r\n");
      out.write("\t\t\tsuccess:function(res){\r\n");
      out.write("\t\t\t\tif(res.success){\r\n");
      out.write("\t\t\t\t\tvar html=\"\";\r\n");
      out.write("\t\t\t\t\t$(res.data).each(function(i, item) {\r\n");
      out.write("\t\t\t\t\t\thtml += '<option  value=\"'+item.dictValue+'\" name=\"action\">' + item.dictLabel + '</option>';\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t$(\"#gw\").append(html);\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\talert(res.msg)\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\t\r\n");
      out.write("\r\n");
      out.write("\t\t$(function() {\r\n");
      out.write("\t\t    var options = {\r\n");
      out.write("\t\t        url: ctx+\"/RoleServlet?method=roleList\",\r\n");
      out.write("\t\t        createUrl: prefix + \"/add.jsp\",\r\n");
      out.write("\t\t        updateUrl: ctx + \"/RoleServlet?method=to_roleUpdate\",\r\n");
      out.write("\t\t        removeUrl: ctx + \"/RoleServlet?method=roleRemove\",\r\n");
      out.write("\t\t        sortName: \"roleSort\",\r\n");
      out.write("\t\t        modalName: \"角色\",\r\n");
      out.write("\t\t        search: false,\r\n");
      out.write("\t\t        showExport: false,\r\n");
      out.write("\t\t        columns: [{\r\n");
      out.write("\t\t            checkbox: true\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'roleId',\r\n");
      out.write("\t\t            title: '角色编号'\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'roleName',\r\n");
      out.write("\t\t            title: '角色名称'\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'roleKey',\r\n");
      out.write("\t\t            title: '权限字符'\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'roleSort',\r\n");
      out.write("\t\t            title: '显示顺序'\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'status',\r\n");
      out.write("\t\t            title: '状态',\r\n");
      out.write("\t\t            align: 'center',\r\n");
      out.write("\t\t            formatter: function(value, row, index) {\r\n");
      out.write("\t\t                if (value == 0) {\r\n");
      out.write("\t\t                    return '<span class=\"badge badge-primary\">正常</span>';\r\n");
      out.write("\t\t                } else if (value == 1) {\r\n");
      out.write("\t\t                    return '<span class=\"badge badge-danger\">停用</span>';\r\n");
      out.write("\t\t                }\r\n");
      out.write("\t\t            }\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            field: 'createDateTimeStr',\r\n");
      out.write("\t\t            title: '创建时间'\r\n");
      out.write("\t\t        },\r\n");
      out.write("\t\t        {\r\n");
      out.write("\t\t            title: '操作',\r\n");
      out.write("\t\t            align: 'center',\r\n");
      out.write("\t\t            formatter: function(value, row, index) {\r\n");
      out.write("\t\t                var actions = [];\r\n");
      out.write("\t\t                actions.push('<a class=\"btn btn-success btn-xs ' + editFlag + '\" href=\"javascript:void(0)\" onclick=\"$.operate.edit(\\'' + row.roleId + '\\')\"><i class=\"fa fa-edit\"></i>编辑</a> ');\r\n");
      out.write("\t\t                actions.push('<a class=\"btn btn-danger btn-xs ' + removeFlag + '\" href=\"javascript:void(0)\" onclick=\"$.operate.remove(\\'' + row.roleId + '\\')\"><i class=\"fa fa-remove\"></i>删除</a>');\r\n");
      out.write("\t\t                return actions.join('');\r\n");
      out.write("\t\t            }\r\n");
      out.write("\t\t        }]\r\n");
      out.write("\t\t    };\r\n");
      out.write("\t\t    $.table.init(options);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
